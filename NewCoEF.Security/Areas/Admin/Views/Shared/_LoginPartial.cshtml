@using Microsoft.AspNetCore.Identity

@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        //Controllo dell'appartenenza della policy chiamata AdminPolicy
        @if ((await AuthorizationService.AuthorizeAsync(User, "AdminPolicy")).Succeeded)
        {
            //La policy è attiva secondo le regole
            <a class="nav-link text-dark ml-2" asp-area="Identity" asp-page="/Account/Manage/Index"
               title="Manage">@User.Identity.Name</a>
            <a class="nav-link text-dark text-uppercase" asp-area="Admin" asp-controller="ApplicationUserRoles"
               asp-action="Index">Roles</a>
            <a class="nav-link text-dark text-uppercase" asp-area="Admin" asp-controller="ApplicationUser"
               asp-action="Index">Users</a>
        }
        else
        {
            //La policy NON è attiva secondo le regole
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index"
               title="Manage">Hello @User.Identity.Name!</a>
        }
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
